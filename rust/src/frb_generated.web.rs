// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl<T> CstDecode<Option<T>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
where
    JsValue: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null() && !self.is_undefined()).then(|| self.cst_decode())
    }
}
impl CstDecode<anyhow::Error> for String {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<String> for String {
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<crate::api::api::Author>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::Author {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::api::Author {
            first_name: self_.get(0).cst_decode(),
            last_name: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::BarcodeDetectResult>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::BarcodeDetectResult {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::api::BarcodeDetectResult {
            value: self_.get(0).cst_decode(),
            corners: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::BarcodeDetectResults>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::BarcodeDetectResults {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::api::BarcodeDetectResults {
            results: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::BookMetaData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::BookMetaData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            6,
            "Expected 6 elements, got {}",
            self_.length()
        );
        crate::api::api::BookMetaData {
            isbn: self_.get(0).cst_decode(),
            title: self_.get(1).cst_decode(),
            authors: self_.get(2).cst_decode(),
            blurb: self_.get(3).cst_decode(),
            keywords: self_.get(4).cst_decode(),
            price_cent: self_.get(5).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::BookMetaDataFromProvider>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::BookMetaDataFromProvider {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::api::api::BookMetaDataFromProvider {
            title: self_.get(0).cst_decode(),
            authors: self_.get(1).cst_decode(),
            blurb: self_.get(2).cst_decode(),
            keywords: self_.get(3).cst_decode(),
            market_price: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::BundleMetaData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::BundleMetaData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::api::BundleMetaData {
            weight_grams: self_.get(0).cst_decode(),
            item_state: self_.get(1).cst_decode(),
            books: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::ISBNMetadataPair>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::ISBNMetadataPair {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::api::ISBNMetadataPair {
            isbn: self_.get(0).cst_decode(),
            metadatas: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<String> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::api::Author>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::api::Author> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::api::BarcodeDetectResult>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::api::BarcodeDetectResult> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::api::BookMetaData>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::api::BookMetaData> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::api::ISBNMetadataPair>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::api::ISBNMetadataPair> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::api::BundleMetaData>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<Option<crate::api::api::BundleMetaData>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::api::Point>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::api::Point> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<f32>> for Box<[f32]> {
    fn cst_decode(self) -> Vec<f32> {
        self.into_vec()
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<Vec<crate::api::api::ProviderMetadataPair>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::api::ProviderMetadataPair> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Option<String>> for Option<String> {
    fn cst_decode(self) -> Option<String> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<crate::api::api::Point>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::Point {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::api::Point {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::ProviderMetadataPair>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::ProviderMetadataPair {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::api::ProviderMetadataPair {
            provider: self_.get(0).cst_decode(),
            metadata: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<anyhow::Error> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<f32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> f32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<crate::api::api::ItemState>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::ItemState {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<Vec<f32>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<f32> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Float32Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<crate::api::api::ProviderEnum>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::api::ProviderEnum {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<u16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u16 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[wasm_bindgen]
pub fn wire_detect_barcode_in_image(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    img_path: String,
) {
    wire_detect_barcode_in_image_impl(port_, img_path)
}

#[wasm_bindgen]
pub fn wire_get_auto_metadata_from_bundle(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: String,
) {
    wire_get_auto_metadata_from_bundle_impl(port_, path)
}

#[wasm_bindgen]
pub fn wire_get_manual_metadata_for_bundle(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bundle_path: String,
) {
    wire_get_manual_metadata_for_bundle_impl(port_, bundle_path)
}

#[wasm_bindgen]
pub fn wire_get_merged_metadata_for_all_bundles(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bundles_dir: String,
) {
    wire_get_merged_metadata_for_all_bundles_impl(port_, bundles_dir)
}

#[wasm_bindgen]
pub fn wire_get_merged_metadata_for_bundle(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bundle_path: String,
) {
    wire_get_merged_metadata_for_bundle_impl(port_, bundle_path)
}

#[wasm_bindgen]
pub fn wire_get_metadata_from_isbns(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    isbns: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    path: String,
) {
    wire_get_metadata_from_isbns_impl(port_, isbns, path)
}

#[wasm_bindgen]
pub fn wire_get_metadata_from_provider(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    provider: i32,
    isbn: String,
) {
    wire_get_metadata_from_provider_impl(port_, provider, isbn)
}

#[wasm_bindgen]
pub fn wire_set_manual_metadata_for_bundle(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bundle_path: String,
    bundle_metadata: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_set_manual_metadata_for_bundle_impl(port_, bundle_path, bundle_metadata)
}
