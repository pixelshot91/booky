// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<BarcodeDetectResults> detectBarcodeInImage(
      {required String imgPath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDetectBarcodeInImageConstMeta;

  Future<void> getMetadataFromIsbns(
      {required List<String> isbns, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMetadataFromIsbnsConstMeta;

  Future<List<ISBNMetadataPair>> getAutoMetadataFromBundle(
      {required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAutoMetadataFromBundleConstMeta;

  Future<BundleMetaData> getManualMetadataForBundle(
      {required String bundlePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetManualMetadataForBundleConstMeta;

  Future<void> setManualMetadataForBundle(
      {required String bundlePath,
      required BundleMetaData bundleMetadata,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetManualMetadataForBundleConstMeta;

  /// Use tokio async to get all the data faster than just calling many times [`get_merged_metadata_for_bundle`]
  Future<List<BundleMetaData?>> getMergedMetadataForAllBundles(
      {required String bundlesDir, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMergedMetadataForAllBundlesConstMeta;

  Future<BundleMetaData> getMergedMetadataForBundle(
      {required String bundlePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMergedMetadataForBundleConstMeta;

  Future<BookMetaDataFromProvider?> getMetadataFromProvider(
      {required ProviderEnum provider, required String isbn, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMetadataFromProviderConstMeta;
}

class Author {
  final String firstName;
  final String lastName;

  const Author({
    required this.firstName,
    required this.lastName,
  });
}

class BarcodeDetectResult {
  final String value;
  final List<Point> corners;

  const BarcodeDetectResult({
    required this.value,
    required this.corners,
  });
}

class BarcodeDetectResults {
  final List<BarcodeDetectResult> results;

  const BarcodeDetectResults({
    required this.results,
  });
}

class BookMetaData {
  String isbn;
  String? title;
  List<Author> authors;
  String? blurb;
  List<String> keywords;
  int? priceCent;

  BookMetaData({
    required this.isbn,
    this.title,
    required this.authors,
    this.blurb,
    required this.keywords,
    this.priceCent,
  });
}

class BookMetaDataFromProvider {
  final String? title;
  final List<Author> authors;
  final String? blurb;
  final List<String> keywords;
  final Float32List marketPrice;

  const BookMetaDataFromProvider({
    this.title,
    required this.authors,
    this.blurb,
    required this.keywords,
    required this.marketPrice,
  });
}

class BundleMetaData {
  int? weightGrams;
  ItemState? itemState;
  final List<BookMetaData> books;

  BundleMetaData({
    this.weightGrams,
    this.itemState,
    required this.books,
  });
}

class ISBNMetadataPair {
  final String isbn;
  final List<ProviderMetadataPair> metadatas;

  const ISBNMetadataPair({
    required this.isbn,
    required this.metadatas,
  });
}

enum ItemState {
  BrandNew,
  VeryGood,
  Good,
  Medium,
}

class Point {
  final int x;
  final int y;

  const Point({
    required this.x,
    required this.y,
  });
}

enum ProviderEnum {
  Babelio,
  GoogleBooks,
  BooksPrice,
  AbeBooks,
  LesLibraires,
  JustBooks,
}

class ProviderMetadataPair {
  final ProviderEnum provider;
  final BookMetaDataFromProvider? metadata;

  const ProviderMetadataPair({
    required this.provider,
    this.metadata,
  });
}
